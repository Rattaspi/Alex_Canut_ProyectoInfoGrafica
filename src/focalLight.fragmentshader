#version 330 core
// Ouput data
out vec4 color;
in vec4 normal;
in vec4 position;
in vec2 texCoords;

uniform vec3 luzAmbiental;
uniform vec3 luzEspecular;
uniform vec3 luzDifusa;
uniform float roughness;
uniform vec3 camPos;
uniform vec3 focoPos;
uniform vec3 direccionFoco;
uniform float aperturaMax;
uniform float aperturaMin;

struct Material{
  sampler2D TexturaDifusa;
  sampler2D TexturaEspecular;
  float shininess;
};

uniform Material mat;

void main(){
  vec3 diffuse;
  vec3 specular;
  vec4 colorOriginal = vec4(0,0,1,1);

  //AMBIENTAL
  vec4 iluminacionAmbientalL = colorOriginal* vec4(luzAmbiental,1);
  //ATENUACION
  float d = length(focoPos - position.xyz);
  float fAtt = 1/(1+0.045*d + 0.0075*d*d);
     

  vec3 incidenciaLuzNorm = normalize(focoPos - position.xyz);
  float theta = dot(incidenciaLuzNorm, normalize(-direccionFoco));
  //DIFUSA
  float diff = max(dot(normal.xyz,incidenciaLuzNorm),0.0);
  diffuse = luzDifusa * diff*colorOriginal.xyz;
  //ESPECULAR
  vec3 viewPortDir = normalize(camPos - position.xyz);
  vec3 reflectionDir = reflect(-incidenciaLuzNorm, normal.xyz);
  float esp = pow(max(dot(reflectionDir,viewPortDir),0.0),roughness);

  specular = luzEspecular*esp*vec3(1,1,1);

  float epsilon = aperturaMin - aperturaMax;
  float inte = clamp((theta-aperturaMax)/epsilon,0,1);
 
  vec3 sumaIluminaciones = specular+iluminacionAmbientalL.xyz + diffuse;

  color = inte*fAtt*(vec4(specular,1)+vec4(diffuse,1)+iluminacionAmbientalL);
 
  //color = vec4(diffuse, 1);
  //color = iluminacionAmbientalL;
}