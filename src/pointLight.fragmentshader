#version 330 core

in vec4 position;
in vec4 normal;

out vec4 color;

uniform vec3 focoPos;
uniform vec3 camPos;
uniform float luzDifusa;
uniform float luzAmbiental;
uniform float luzEspecular;
uniform float roughness;
uniform mat4 finalMat;

void main(){
	color = vec4(0,0,1,1);
	vec4 white = vec4(1,1,1,1);
	float c1, c2, c3;
	c1 = 1.0f;
	c2 = 0.14f;
	c3 = 0.07f;
	
	//atenuacion
	float distance = length((finalMat*vec4(focoPos,1)) - position.xyz);
	float atenuacion = 1 / (c1 + c2*distance + c3*distance*distance);
	
	//ambiental
	vec4 ambiental = luzAmbiental * color;

	//difusa
	//vec3 L = normalize((finalMat*vec4(focoPos,1)).xyz - position.xyz);
	vec3 L = normalize(focoPos - position.xyz);
	float diff = max(dot(normal.xyz, L), 0);
	vec4 difusa = luzDifusa * diff * color;

	//especular
	vec3 V = normalize(camPos - position.xyz);
	vec3 R = reflect(-L, normal.xyz);
	float esp = max(dot(R,V), 0);
	esp = pow(esp, roughness);
	vec4 especular = luzEspecular * esp * white;

	color =  (ambiental + difusa + especular);
}