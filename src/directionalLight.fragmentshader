#version 330 core

in vec4 position;
in vec4 normal;

out vec4 color;

uniform vec3 luzAmbiental;
uniform vec3 direccionLuz;
uniform vec3 camPos;
uniform vec3 focusPos;
uniform float roughness;
uniform vec3 luzDifusa;
uniform vec3 luzEspecular;

void main(){
	vec3 colorOriginal = vec3(0,0,1);
	
	//calculo luz ambiental
	vec4 Lamb = vec4(luzAmbiental * colorOriginal, 1);

	//calculo luz difusa
	float diff = max(dot(normal.xyz, -normalize(direccionLuz)),0);
	vec4 Ldif = vec4(luzDifusa * diff * colorOriginal, 1);

	//calculo de la luz especular
	vec3 V = normalize(camPos-position.xyz);
	vec3 R = reflect(normalize(direccionLuz), normal.xyz);
	float esp = pow(max(dot(R,V),0), roughness);
	vec4 Lesp = vec4(luzEspecular * esp * vec3(1,1,1), 1);
	
	//color final
	color = Lamb + Ldif + Lesp;
}